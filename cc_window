subroutine cc_window(dat,npts,window_type,istart,iend,ishift,dlnA,nlen,dat_win)
    ! delay by ishift and scale by exp(dlnA)
    use constants
    implicit none

    real(kind=CUSTOM_REAL), dimension(*), intent(in) :: dat
    real(kind=CUSTOM_REAL), intent(in) :: dlnA
    integer, intent(in) :: npts, istart,iend, ishift,window_type
    integer, intent(out) :: nlen
    real(kind=CUSTOM_REAL), dimension(*), intent(out) :: dat_win

    integer ::  i, j
    real(kind=CUSTOM_REAL) :: sfac1,  fac

    !print*
    !print*,'window with corrections: isfhit = ', ishift, ' dlnA = ',dlnA,&
    !'window type -- ',window_type

    nlen = iend - istart+1

    ! some constants
    sfac1 = (2./real(nlen))**2   ! for Welch window

    ! initialization
    dat_win(1:npts) = 0.d0

    do i = 1, nlen
    if(window_type ==2) then
        fac = 1 - sfac1*((i-1) - real(nlen)/2.)**2
    elseif(window_type ==3) then
        fac = 1. - cos(PI*(i-1)/(nlen-1))**ipwr_t
    elseif(window_type ==4) then
        fac = 0.5 - 0.5*cos(TWOPI*(i-1)/(nlen-1))
    else
        fac = 1. ! boxcar window
    endif
        ! index 
    j = i + (istart-1) - ishift

    if(j>=1 .and. j <=npts) then
        dat_win(i) = dat(j) * exp(dlnA) * fac ! shift and scale
    endif

    enddo

end subroutine cc_window
